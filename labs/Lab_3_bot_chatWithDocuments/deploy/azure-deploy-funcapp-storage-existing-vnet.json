{

    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.10.61.36676",
        "templateHash": "10199288641664815283"
      }
    },
    "parameters":{
        "prefixName": {
            "type": "string",
            "defaultValue": "devtest"

            },
      "functionAppName": {
        "type": "string",
        "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function app."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The location into which the resources should be deployed."
        }
      },
      "functionWorkerRuntime": {
        "type": "string",
        "defaultValue": "python",
        "allowedValues": [
          "dotnet-isolated",
          "dotnet",
          "node",
          "python",
          "java"
        ],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      "functionPlanOS": {
        "type": "string",
        "defaultValue": "Linux",
        "allowedValues": [
          "Windows",
          "Linux"
        ],
        "metadata": {
          "description": "Specifies the OS used for the Azure Function hosting plan."
        }
      },
      "functionAppPlanSku": {
        "type": "string",
        "defaultValue": "EP1",
        "allowedValues": [
          "EP1",
          "EP2",
          "EP3"
        ],
        "metadata": {
          "description": "Specifies the Azure Function hosting plan SKU."
        }
      },
      "functionAppPlanName": {
        "type": "string",
        "defaultValue": "[format('plan-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function hosting plan."
        }
      },
      "functionStorageAccountName": {
        "type": "string",
        "defaultValue": "[format('st{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the backend Azure storage account used by the Azure Function app."
        }
      },
      "vnetNameRgName": {
            "type": "String",
            "defaultValue": "LLM-GenerativeAI",
            "metadata": {
                "description": "The name of the resource group containing the virtual network for virtual network integration."
            }
      },
      "vnetName": {
        "type": "string",
        "defaultValue": "tibco-test-vnet",
        "metadata": {
          "description": "The name of the virtual network for virtual network integration."
        }
      },
      "functionSubnetName": {
        "type": "string",
        "defaultValue": "func",
        "metadata": {
          "description": "The name of the virtual network subnet to be associated with the Azure Function app."
        }
      },
      "privateEndpointSubnetName": {
        "type": "string",
        "defaultValue": "default",
        "metadata": {
          "description": "The name of the virtual network subnet used for allocating IP addresses for private endpoints."
        }
      },
      "blobPrivateDNSZoneResourceGroupName": {
			"type": "string",
            "defaultValue":"LLM-GenerativeAI",
			"metadata": {
				"description": "Resource group name where privatelink.blob.core.windows.net Private DNS Zone exists"
			}
		},
      "functionPrivateDNSZoneResourceGroupName": {
			"type": "string",
            "defaultValue":"LLM-GenerativeAI",
			"metadata": {
				"description": "Resource group name where privatelink.azurewebsites.net Private DNS Zone exists"
			}
		},
        "linuxFxVersion": {
        "type": "string",
        "defaultValue": "Python|3.9",
        "metadata": {
            "description": "Required for Linux app to represent runtime stack in the format of 'runtime|runtimeVersion'. For example: 'python|3.9'"
        }
        },
        "packageUri": {
        "type": "string",
        "defaultValue": "https://anildwablobstorage.blob.core.windows.net/public/orchestrator.zip?sv=2021-08-06&st=2023-03-01T04%3A56%3A06Z&se=2024-03-02T04%3A56%3A00Z&sr=b&sp=r&sig=uU8xLFiWmm6%2BRGOMo01OKlzYEcLOiJk%2FM2H6hedRcPM%3D",
        "metadata": {
            "description": "The zip content url."
        }
        },
        "OPENAI_RESOURCE_ENDPOINT" : {
        "type": "string",
        "metadata": {
            "description": "OpenAI resource endpoint. https://<openai-endpoint-name>.openai.azure.com/"
        }
        },
        "OPENAI_API_KEY" : {
        "type": "string",
        "metadata": {
            "description": "OpenAI API key."
        }
        },
        "OPENAI_Model_Deployment_Name" : {
        "type": "string",
        "metadata": {
            "description": "Deployment name of the OpenAI model."
        }
        }
    },
    "variables":{
        "paramName": "[parameters('prefixName')]",
        "rgId": "[resourceGroup().id]",
        "uniqueName": "[substring(uniqueString(variables('rgId')),0,4)]",
        "applicationInsightsName": "[format('appi-{0}', uniqueString(resourceGroup().id))]",
        "privateFunctionAppDnsZoneName": "privatelink.azurewebsites.net",
        "privateEndpointFunctionAppName": "[format('{0}-private-endpoint', parameters('functionAppName'))]",
        "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
        "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', parameters('functionStorageAccountName'))]",
        "isReserved": "[if(equals(parameters('functionPlanOS'), 'Linux'), true(), false())]"
        
    },
    "resources":[
        {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointStorageBlobName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "MyStorageBlobPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId(parameters('blobPrivateDNSZoneResourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]"
        ]
      },
        {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2022-05-01",
        "name": "[parameters('functionStorageAccountName')]",
        "location": "[parameters('location')]",
        "kind": "StorageV2",
        "sku": {
          "name": "Standard_LRS"
        },
        "properties": {
          "publicNetworkAccess": "Disabled",
          "allowBlobPublicAccess": false,
          "networkAcls": {
            "bypass": "None",
            "defaultAction": "Deny"
          }
        }
      },
      {
        "type": "Microsoft.Insights/components",
        "apiVersion": "2020-02-02",
        "name": "[variables('applicationInsightsName')]",
        "location": "[parameters('location')]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2022-03-01",
        "name": "[parameters('functionAppPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "tier": "ElasticPremium",
          "name": "[parameters('functionAppPlanSku')]",
          "size": "[parameters('functionAppPlanSku')]",
          "family": "EP"
        },
        "kind": "elastic",
        "properties": {
          "maximumElasticWorkerCount": 20,
          "reserved": "[variables('isReserved')]"
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-03-01",
        "name": "[parameters('functionAppName')]",
        "location": "[parameters('location')]",
        "kind": "[if(variables('isReserved'), 'functionapp,linux', 'functionapp')]",
        "identity": {
				    "type": "SystemAssigned"
        },
        "properties": {
          "reserved": "[variables('isReserved')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "functionsRuntimeScaleMonitoringEnabled": true,
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('functionStorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-05-01').keys[0].value)]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~4"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "[parameters('functionWorkerRuntime')]"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~14"
              },
              {
                "name": "WEBSITE_VNET_ROUTE_ALL",
                "value": "1"
              },
              {
                "name": "WEBSITE_CONTENTOVERVNET",
                "value": "1"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "[parameters('packageUri')]"
              },
              {
              "name": "OPENAI_API_KEY",
              "value": "[parameters('OPENAI_API_KEY')]"
            },
            {
              "name": "OPENAI_RESOURCE_ENDPOINT",
              "value": "[parameters('OPENAI_RESOURCE_ENDPOINT')]"
            },
            {
              "name": "AZSEARCH_EP",
              "value": "[concat('https://',format('search-{0}', uniqueString(resourceGroup().id)),'.search.windows.net/')]"
            },
            {
              "name": "AZSEARCH_KEY",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', concat(format('search-{0}', uniqueString(resourceGroup().id)))), '2020-08-01').primaryKey]"
            },
            {
                "name": "INDEX_NAME",
                "value": "azure-ml-docs"
    
            },
            {
                "name": "SEMANTIC_CONFIG",
                "value": "semantic-config"
    
            },
            {
              "name": "GPT_ENGINE",
              "value": "[parameters('OPENAI_Model_Deployment_Name')]"
            }
            ]
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
          "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Web/sites/networkConfig",
        "apiVersion": "2022-03-01",
        "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
        "properties": {
          "subnetResourceId": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('functionSubnetName'))]",
          "swiftSupported": true
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointFunctionAppName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId(parameters('vnetNameRgName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "MyFunctionAppPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "groupIds": [
                  "sites"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"

        ]
      },
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointFunctionAppName'), 'funcPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId(parameters('functionPrivateDNSZoneResourceGroupName'), 'Microsoft.Network/privateDnsZones', variables('privateFunctionAppDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointFunctionAppName'))]"
          
        ]
      }


    ]
}
