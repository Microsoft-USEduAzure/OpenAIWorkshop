{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.10.61.36676",
        "templateHash": "12847217906836811677"
      }
    },
    "parameters": {
      "functionAppName": {
        "type": "string",
        "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function app."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "The location into which the resources should be deployed."
        }
      },
      "functionWorkerRuntime": {
        "type": "string",
        "defaultValue": "python",
        "allowedValues": [
          "dotnet",
          "node",
          "python",
          "java"
        ],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      "functionPlanOS": {
        "type": "string",
        "defaultValue": "Linux",
        "allowedValues": [
          "Windows",
          "Linux"
        ],
        "metadata": {
          "description": "Specifies the OS used for the Azure Function hosting plan."
        }
      },
      "functionAppPlanSku": {
        "type": "string",
        "defaultValue": "EP1",
        "allowedValues": [
          "EP1",
          "EP2",
          "EP3"
        ],
        "metadata": {
          "description": "Specifies the Azure Function hosting plan SKU."
        }
      },
      "functionAppPlanName": {
        "type": "string",
        "defaultValue": "[format('plan-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function hosting plan."
        }
      },
      "functionStorageAccountName": {
        "type": "string",
        "defaultValue": "[format('st{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the backend Azure storage account used by the Azure Function app."
        }
      },
      "vnetName": {
        "type": "string",
        "defaultValue": "[format('vnet-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the virtual network for virtual network integration."
        }
      },
      "functionSubnetName": {
        "type": "string",
        "defaultValue": "snet-func",
        "metadata": {
          "description": "The name of the virtual network subnet to be associated with the Azure Function app."
        }
      },
      "privateEndpointSubnetName": {
        "type": "string",
        "defaultValue": "snet-pe",
        "metadata": {
          "description": "The name of the virtual network subnet used for allocating IP addresses for private endpoints."
        }
      },
      "vnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.100.0.0/24",
        "metadata": {
          "description": "The IP adddress space used for the virtual network."
        }
      },
      "functionSubnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.100.0.0/27",
        "metadata": {
          "description": "The IP address space used for the Azure Function integration subnet."
        }
      },
      "privateEndpointSubnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.100.0.32/27",
        "metadata": {
          "description": "The IP address space used for the private endpoints."
        }
      },
      "linuxFxVersion": {
        "type": "string",
        "defaultValue": "Python|3.9",
        "metadata": {
          "description": "Only required for Linux app to represent runtime stack in the format of 'runtime|runtimeVersion'. For example: 'python|3.9'"
        }
      },
      "packageUri": {
        "type": "string",
        "defaultValue": "https://anildwablobstorage.blob.core.windows.net/public/orchestrator.zip?sv=2021-08-06&st=2023-03-01T04%3A56%3A06Z&se=2024-03-02T04%3A56%3A00Z&sr=b&sp=r&sig=uU8xLFiWmm6%2BRGOMo01OKlzYEcLOiJk%2FM2H6hedRcPM%3D",
        "metadata": {
            "description": "The zip content url."
        }
      },
        "OPENAI_RESOURCE_ENDPOINT" : {
        "type": "string",
        "metadata": {
            "description": "OpenAI resource endpoint. https://<openai-endpoint-name>.openai.azure.com/"
        }
      },
        "OPENAI_API_KEY" : {
        "type": "string",
        "metadata": {
            "description": "OpenAI API key."
        }
      },
        "OPENAI_Model_Deployment_Name" : {
        "type": "string",
        "metadata": {
            "description": "Deployment name of the OpenAI model."
        }
      },
      "afr_custom_domain_name" : {
        "type": "string",
        "defaultValue":"afr-197830331",
        "metadata": {
            "description": "Custom domain name for the Azure Form Recognizer."
        }
      }
    },
    "variables": {
      "applicationInsightsName": "[format('appi-{0}', uniqueString(resourceGroup().id))]",
      "privateStorageBlobDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
      "privateEndpointStorageBlobName": "[format('{0}-blob-private-endpoint', parameters('functionStorageAccountName'))]",
      "privateEndpointSearchName": "[format('{0}-search-private-endpoint', format('search-{0}', uniqueString(resourceGroup().id)))]",
      "privateSearchDnsZoneName": "privatelink.search.windows.net",
      "privateAFRDnsZoneName": "privatelink.cognitiveservices.azure.com",
      "privateEndPointAFRName": "[format('afr-cognitive-{0}-pe', uniqueString(resourceGroup().id))]",
      "isReserved": "[if(equals(parameters('functionPlanOS'), 'Linux'), true(), false())]"
    },
    "resources": [
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2022-05-01",
        "name": "[parameters('vnetName')]",
        "location": "[parameters('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[parameters('vnetAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[parameters('functionSubnetName')]",
              "properties": {
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "delegations": [
                  {
                    "name": "webapp",
                    "properties": {
                      "serviceName": "Microsoft.Web/serverFarms"
                    }
                  }
                ],
                "addressPrefix": "[parameters('functionSubnetAddressPrefix')]"
              }
            },
            {
              "name": "[parameters('privateEndpointSubnetName')]",
              "properties": {
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "addressPrefix": "[parameters('privateEndpointSubnetAddressPrefix')]"
              }
            }
          ]
        }
      },
      
      {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "[variables('privateStorageBlobDnsZoneName')]",
        "location": "global"
      },

      {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('privateStorageBlobDnsZoneName')))]",
        "location": "global",
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      
      
      
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]",
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateStorageBlobDnsZoneName'))]"
        ]
      },
      
      
      
      {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2022-05-01",
        "name": "[variables('privateEndpointStorageBlobName')]",
        "location": "[parameters('location')]",
        "properties": {
          "subnet": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
          },
          "privateLinkServiceConnections": [
            {
              "name": "MyStorageBlobPrivateLinkConnection",
              "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
                "groupIds": [
                  "blob"
                ]
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      
      
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2022-05-01",
        "name": "[parameters('functionStorageAccountName')]",
        "location": "[parameters('location')]",
        "kind": "StorageV2",
        "sku": {
          "name": "Standard_LRS"
        },
        "properties": {
          "publicNetworkAccess": "Disabled",
          "allowBlobPublicAccess": false,
          "networkAcls": {
            "bypass": "None",
            "defaultAction": "Deny"
          }
        }
      },
      
      {
        "type": "Microsoft.Insights/components",
        "apiVersion": "2020-02-02",
        "name": "[variables('applicationInsightsName')]",
        "location": "[parameters('location')]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2022-09-01",
        "name": "[parameters('functionAppPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "tier": "ElasticPremium",
          "name": "[parameters('functionAppPlanSku')]",
          "size": "[parameters('functionAppPlanSku')]",
          "family": "EP"
        },
        "kind": "elastic",
        "properties": {
          "maximumElasticWorkerCount": 20,
          "reserved": "[variables('isReserved')]"
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-09-01",
        "name": "[parameters('functionAppName')]",
        "location": "[parameters('location')]",
        "kind": "[if(variables('isReserved'), 'functionapp,linux', 'functionapp')]",
        "properties": {
          "reserved": "[variables('isReserved')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "siteConfig": {
            "functionsRuntimeScaleMonitoringEnabled": true,
            "linuxFxVersion": "[if(variables('isReserved'), parameters('linuxFxVersion'), json('null'))]",
            "appSettings": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
              },
              {
                "name": "AzureWebJobsStorage",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('functionStorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-05-01').keys[0].value)]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~4"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "[parameters('functionWorkerRuntime')]"
              },
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~14"
              },
              {
                "name": "WEBSITE_VNET_ROUTE_ALL",
                "value": "1"
              },
              {
                "name": "WEBSITE_CONTENTOVERVNET",
                "value": "1"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "[parameters('packageUri')]"
              },
              {
              "name": "OPENAI_API_KEY",
              "value": "[parameters('OPENAI_API_KEY')]"
            },
            {
              "name": "OPENAI_RESOURCE_ENDPOINT",
              "value": "[parameters('OPENAI_RESOURCE_ENDPOINT')]"
            },
            {
              "name": "AZSEARCH_EP",
              "value": "[concat('https://',format('search-{0}', uniqueString(resourceGroup().id)),'.search.windows.net/')]"
            },
            {
              "name": "AZSEARCH_KEY",
              "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', concat(format('search-{0}', uniqueString(resourceGroup().id)))), '2020-08-01').primaryKey]"
            },
            {
                "name": "INDEX_NAME",
                "value": "azure-ml-docs"
    
            },
            {
                "name": "SEMANTIC_CONFIG",
                "value": "semantic-config"
    
            },
            {
              "name": "GPT_ENGINE",
              "value": "[parameters('OPENAI_Model_Deployment_Name')]"
            }
            ]
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
          "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName'))]",
          "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('privateEndpointStorageBlobName'), 'blobPrivateDnsZoneGroup')]",
          "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('privateStorageBlobDnsZoneName'), format('{0}-link', variables('privateStorageBlobDnsZoneName')))]"
        ]
      },
      {
        "type": "Microsoft.Web/sites/networkConfig",
        "apiVersion": "2022-09-01",
        "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
        "properties": {
          "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('functionSubnetName'))]",
          "swiftSupported": true
        },
        "dependsOn": [
          "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      {
        "type": "Microsoft.Search/searchServices",
        "apiVersion": "2022-09-01",
        "name": "[format('search-{0}', uniqueString(resourceGroup().id))]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "standard"
        },
        "properties": {
            "semanticSearch": "free",
            "publicNetworkAccess": "Disabled",
            "allowBlobPublicAccess": false,
            "networkAcls": {
                "bypass": "None",
                "defaultAction": "Deny"
            },
             "privateEndpointConnections": [
                    {
                        "name": "mySearchServicePrivateEndpoint",
                        "properties": {
                            "privateEndpoint": {
                                "id": "[resourceId('Microsoft.Network/privateEndpoints', 'myPrivateEndpointName')]"
                            },
                            "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Approved by template deployment.",
                                "actionsRequired": []
                            }
                        }
                    }
                ]
        }
      },
      
     {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "[variables('privateSearchDnsZoneName')]",
        "location": "global"
     },
     {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('privateSearchDnsZoneName'), format('{0}-link', variables('privateSearchDnsZoneName')))]",
        "location": "global",
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateSearchDnsZoneName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      
      
      
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndpointSearchName'), 'searchPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateSearchDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointSearchName'))]",
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateSearchDnsZoneName'))]"
        ]
      },
      {
       "type": "Microsoft.Network/privateEndpoints",
       "apiVersion": "2022-05-01",
       "name": "[variables('privateEndpointSearchName')]",
       "location": "[parameters('location')]",
       "properties": {
        "subnet": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
        },
         "privateLinkServiceConnections": [
           {
             "name": "searchService",
             "properties": {
               "privateLinkServiceId": "[resourceId('Microsoft.Search/searchServices', format('search-{0}', uniqueString(resourceGroup().id)))]",
               "groupIds": [
                 "searchService"
               ]
             }
           }
         ]
       },
        "dependsOn": [
            "[resourceId('Microsoft.Search/searchServices', format('search-{0}', uniqueString(resourceGroup().id)))]",
            "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
     },
     {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2021-10-01",
            "name": "[format('afr-cognitive-{0}', uniqueString(resourceGroup().id))]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "S0"
            },
            "kind": "FormRecognizer",
            "properties": {
                "createAcquisitionFromUploadedPdf": true,
                "createFormPageJson": true,
                "createFormWordJson": true,
                "createReceiptPageJson": true,
                "customSubDomainName": "[parameters('afr_custom_domain_name')]",
                "publicNetworkAccess": "Disabled",
                "allowBlobPublicAccess": false,
                "networkAcls": {
                    "bypass": "None",
                    "defaultAction": "Deny"
                }
                
        
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
     },
     {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2020-06-01",
        "name": "[variables('privateAFRDnsZoneName')]",
        "location": "global"
     },
     {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('privateAFRDnsZoneName'), format('{0}-link', variables('privateAFRDnsZoneName')))]",
        "location": "global",
        "properties": {
          "registrationEnabled": false,
          "virtualNetwork": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateAFRDnsZoneName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
      },
      
      
      
      {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2022-05-01",
        "name": "[format('{0}/{1}', variables('privateEndPointAFRName'), 'afrPrivateDnsZoneGroup')]",
        "properties": {
          "privateDnsZoneConfigs": [
            {
              "name": "config",
              "properties": {
                "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateAFRDnsZoneName'))]"
              }
            }
          ]
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndPointAFRName'))]",
          "[resourceId('Microsoft.Network/privateDnsZones', variables('privateAFRDnsZoneName'))]"
        ]
      },
      {
       "type": "Microsoft.Network/privateEndpoints",
       "apiVersion": "2022-05-01",
       "name": "[variables('privateEndPointAFRName')]",
       "location": "[parameters('location')]",
       "properties": {
        "subnet": {
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
        },
         "privateLinkServiceConnections": [
           {
             "name": "searchService",
             "properties": {
               "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', format('afr-cognitive-{0}', uniqueString(resourceGroup().id)))]",
               "groupIds": [
                 "account"
               ]
             }
           }
         ]
       },
        "dependsOn": [
            "[resourceId('Microsoft.CognitiveServices/accounts', format('afr-cognitive-{0}', uniqueString(resourceGroup().id)))]",
            "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        ]
     }
    ]
  }
